import {
  GROUND_HEIGHT,
  EDGE_HEIGHT,
  PADDLE_STEP,
  PADDLE_MIN_Z,
  PADDLE_MAX_Z,
  UP,
  DOWN,
  STOP
} from "../defines/constants";

import type { MeshPositions, PlayerInput, /*User,*/ Game/*, GUID*/ } from "../defines/types";
import { Vector3 } from "@babylonjs/core/Maths/math.vector";
// import { generateGuid } from '../helpers/helpers';

interface AIOpponentConfig {
  paddleSpeed: number;
  updateInterval: number;
}

export class AIOpponent {
  private game: Game;
  private config: AIOpponentConfig;
  private lastUpdate: number = 0;
  private ballVelocity: Vector3 = new Vector3(0, 0, 0);
  private lastBallPosition: Vector3 | null = null;

  constructor(game: Game) {
    this.game = game;
    this.config = {
      paddleSpeed: PADDLE_STEP,
      updateInterval: 1000, // üëø 1000 !!!!!!!!!!!!!!!
    };
  }


  update(positions: MeshPositions, currentTime: number): PlayerInput | null {
    if (currentTime - this.lastUpdate < this.config.updateInterval) {
      return null;
    }
    this.lastUpdate = currentTime;

    if (this.lastBallPosition) {
      const deltaTime = this.config.updateInterval / 1000;
      this.ballVelocity = positions.ball
        .subtract(this.lastBallPosition)
        .scale(1.2 / deltaTime);
    } else {
      /* –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –º—è—á –¥–≤–∏–∂–µ—Ç—Å—è –∫ AI */
      const paddleZ = positions.paddleRight.z;
      this.ballVelocity = new Vector3(5, 0, positions.ball.z - paddleZ);
    }
    this.lastBallPosition = positions.ball.clone();

    /* –ï—Å–ª–∏ –º—è—á –¥–≤–∏–∂–µ—Ç—Å—è –≤ —Å—Ç–æ—Ä–æ–Ω—É –ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∫–µ—Ç–∫—É –≤ —Ü–µ–Ω—Ç—Ä */
if (this.ballVelocity.x < 0 || this.ballVelocity.y > 5) {
  const paddleZ = positions.paddleRight.z;
  const doorstep = /*0.4;*/ 0.1 + 0.4 * Math.abs(paddleZ) / (GROUND_HEIGHT/2);
  // const doorstep = Math.max(0.01, 0.05 / (1 + Math.abs(this.ballVelocity.z)));
  // const doorstep = Math.max(0.01, 0.05 / (1 + Math.pow(Math.abs(this.ballVelocity.z), 0.5)));
  if (paddleZ > 0 + doorstep) {
    return this.createInput(UP);
  } else if (paddleZ < 0 - doorstep) {
    return this.createInput(DOWN);
  }
  return null;
}


    /* –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º, –≥–¥–µ –º—è—á –ø–µ—Ä–µ—Å–µ—á–µ—Ç –ª–∏–Ω–∏—é —Ä–∞–∫–µ—Ç–∫–∏ */
    const predictedZ = this.oracleOfDelphi(positions);
    const paddleZ = positions.paddleRight.z;

    /* –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è */
    const doorstep = 0.4; // –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    // const doorstep = Math.max(0.1, 0.3 / (1 + Math.abs(this.ballVelocity.z)));
    // const doorstep = Math.max(0.01, 0.05 / (1 + Math.abs(this.ballVelocity.z)));
    // const doorstep = Math.max(0.01, 0.05 / (1 + Math.pow(Math.abs(this.ballVelocity.z), 0.5)));

    let direction: typeof UP | typeof DOWN | typeof STOP = STOP;

    if (predictedZ < paddleZ - doorstep) direction = UP;
    else if (predictedZ > paddleZ + doorstep) direction = DOWN;

    if (direction !== STOP) {
      return this.createInput(direction);
    }
    return null;
  }

  private createInput(direction: typeof UP | typeof DOWN): PlayerInput {
  return {
    type: "PlayerInput",
    side: "right",
    gameId: this.game.id,
    direction,
  };
}
    /* –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º, –≥–¥–µ –º—è—á –ø–µ—Ä–µ—Å–µ—á–µ—Ç –ª–∏–Ω–∏—é —Ä–∞–∫–µ—Ç–∫–∏ */

    private oracleOfDelphi(positions: MeshPositions): number {
  const ball = positions.ball;
  const paddleX = positions.paddleRight.x;

  if (this.ballVelocity.x > 0) {
    const distanceToPaddle = Math.abs(paddleX - ball.x);
    const timeToPaddle = distanceToPaddle / Math.max(0.001, Math.abs(this.ballVelocity.x));

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ—Ç—Å–∫–æ–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const upperBound = GROUND_HEIGHT / 2 - EDGE_HEIGHT;
    const lowerBound = -GROUND_HEIGHT / 2 + EDGE_HEIGHT;
    
    let remainingTime = timeToPaddle;
    let currentZ = ball.z;
    let currentVz = this.ballVelocity.z;
    
    while (remainingTime > 0) {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç—Å–∫–æ–∫–∞
      let timeToPaddle;
      if (currentVz > 0) {
        timeToPaddle = (upperBound - currentZ) / currentVz;
      } else if (currentVz < 0) {
        timeToPaddle = (lowerBound - currentZ) / currentVz;
      } else {
        break; // –ù–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
      }
      
      timeToPaddle = Math.max(0, timeToPaddle);
      
      if (timeToPaddle >= remainingTime) {
        currentZ += currentVz * remainingTime;
        break;
      } else {
        currentZ += currentVz * timeToPaddle;
        currentVz *= -1; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏ –æ—Ç—Å–∫–æ–∫–µ
        remainingTime -= timeToPaddle;
      }
    }
    
    return Math.max(PADDLE_MIN_Z, Math.min(PADDLE_MAX_Z, currentZ));
  }
  return positions.paddleRight.z;
}

}


// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø—Ä–æ—à–ª–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
//    –ï—Å–ª–∏ –¥–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º

// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –º—è—á –∑–∞–Ω–æ–≤–æ (–ø–æ—Å–ª–µ –≥–æ–ª–∞)
//    –ï—Å–ª–∏ –¥–∞ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º lastBallPosition –∏ –≤—ã—Ö–æ–¥–∏–º

// 3. –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ (–Ω–µ—Ç lastBallPosition):
//    - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º—è—á–∞
//    - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –ø–æ–∫–∞ (–∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞)

// 4. –ï—Å–ª–∏ lastBallPosition –µ—Å—Ç—å:
//    - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ballVelocity

// 5. –ï—Å–ª–∏ –º—è—á –ª–µ—Ç–∏—Ç –≤–ª–µ–≤–æ:
//    - –¥–≤–∏–≥–∞–µ–º —Ä–∞–∫–µ—Ç–∫—É –∫ —Ü–µ–Ω—Ç—Ä—É

// 6. –ï—Å–ª–∏ –º—è—á –ª–µ—Ç–∏—Ç –≤–ø—Ä–∞–≤–æ:
//    - –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø–æ oracleOfDelphi
//    - –¥–≤–∏–≥–∞–µ–º—Å—è –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑/—Å—Ç–æ–∏–º

// 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –º—è—á–∞ –∫–∞–∫ lastBallPosition

